-- MySQL Script generated by MySQL Workbench
-- 02/16/17 13:12:17
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `mydb` ;

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`sede`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`sede` (
  `id_sede` INT NOT NULL AUTO_INCREMENT,
  `desc_sede` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id_sede`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`linea_especialidad`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`linea_especialidad` (
  `nombre` VARCHAR(255) NOT NULL,
  `coordinador` VARCHAR(255) NULL,
  PRIMARY KEY (`nombre`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`asignatura`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`asignatura` (
  `codigo` VARCHAR(255) NOT NULL,
  `linea` VARCHAR(255) NULL,
  PRIMARY KEY (`codigo`),
  INDEX `fk_asig_linea_idx` (`linea` ASC),
  CONSTRAINT `fk_asig_linea`
    FOREIGN KEY (`linea`)
    REFERENCES `mydb`.`linea_especialidad` (`nombre`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`profesor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`profesor` (
  `rut` VARCHAR(255) NOT NULL,
  `digito` CHAR(1) NULL,
  `nombres` VARCHAR(255) NULL,
  `primer_apellido` VARCHAR(255) NULL,
  `segundo_apellido` VARCHAR(255) NULL,
  `correo` VARCHAR(255) NULL,
  PRIMARY KEY (`rut`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`seccion`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`seccion` (
  `id_seccion` VARCHAR(255) NOT NULL,
  `codigo_asignatura` VARCHAR(255) NULL,
  `numero` INT NOT NULL,
  `jornada` VARCHAR(45) NOT NULL,
  `rut_profesor` VARCHAR(255) NULL,
  `sede` INT NOT NULL,
  PRIMARY KEY (`id_seccion`),
  INDEX `fk_seccion_profesor_idx` (`rut_profesor` ASC),
  INDEX `fk_seccion_sede_idx` (`sede` ASC),
  INDEX `fk_seccion_asig_idx` (`codigo_asignatura` ASC),
  CONSTRAINT `fk_seccion_profesor`
    FOREIGN KEY (`rut_profesor`)
    REFERENCES `mydb`.`profesor` (`rut`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_seccion_sede`
    FOREIGN KEY (`sede`)
    REFERENCES `mydb`.`sede` (`id_sede`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_seccion_asig`
    FOREIGN KEY (`codigo_asignatura`)
    REFERENCES `mydb`.`asignatura` (`codigo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`alumno`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`alumno` (
  `rut_alumno` INT NOT NULL,
  `digito` CHAR(1) NULL,
  `carrera` VARCHAR(45) NULL,
  PRIMARY KEY (`rut_alumno`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`en_curso`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`en_curso` (
  `id_reporte` VARCHAR(255) NOT NULL,
  `id_seccion` VARCHAR(255) NOT NULL,
  `rut_alumno` INT NOT NULL,
  `sigla_completa` VARCHAR(45) NOT NULL,
  `ano_academico` VARCHAR(45) NOT NULL,
  `semestre` VARCHAR(45) NOT NULL,
  `c1` VARCHAR(255) NULL,
  `c2` VARCHAR(255) NULL,
  `c3` VARCHAR(255) NULL,
  PRIMARY KEY (`id_reporte`),
  INDEX `fk_reporte_alumno_idx` (`rut_alumno` ASC),
  INDEX `fk_reporte seccion_idx` (`id_seccion` ASC),
  CONSTRAINT `fk_reporte_alumno`
    FOREIGN KEY (`rut_alumno`)
    REFERENCES `mydb`.`alumno` (`rut_alumno`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_reporte seccion`
    FOREIGN KEY (`id_seccion`)
    REFERENCES `mydb`.`seccion` (`id_seccion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`prospecto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`prospecto` (
  `id_prospecto` INT NOT NULL AUTO_INCREMENT,
  `rut_profesor` VARCHAR(255) NOT NULL,
  `seccion` VARCHAR(255) NOT NULL,
  `prueba` INT NOT NULL,
  `envio_prueba` TINYINT(1) NOT NULL,
  `validacion_prueba` TINYINT(1) NOT NULL,
  `comentario` VARCHAR(100) NULL,
  PRIMARY KEY (`id_prospecto`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`csvnotas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`csvnotas` (
  `id_notas` INT NOT NULL AUTO_INCREMENT,
  `sede` VARCHAR(255) NULL,
  `desc_sede` VARCHAR(255) NULL,
  `seccion` VARCHAR(45) NULL,
  `jornada` VARCHAR(45) NULL,
  `rut_alumno` INT NULL,
  `rut_profesor` VARCHAR(255) NULL,
  `nombre_profesor` VARCHAR(255) NULL,
  `alh_ramo_preferencia` VARCHAR(255) NULL,
  `ano_academico` VARCHAR(255) NULL,
  `dom_semestre` VARCHAR(255) NULL,
  `c1` FLOAT NULL,
  `c2` FLOAT NULL,
  `c3` FLOAT NULL,
  `carrera` VARCHAR(255) NULL,
  UNIQUE INDEX `id_notas_UNIQUE` (`id_notas` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`presupuesto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`presupuesto` (
  `id_presupuesto` INT NOT NULL AUTO_INCREMENT,
  `actividad` VARCHAR(255) NULL,
  `grupo` VARCHAR(255) NULL,
  `responsable` VARCHAR(45) NULL,
  `estado` VARCHAR(45) NULL,
  `cuenta` VARCHAR(45) NULL,
  `ceco` VARCHAR(45) NULL,
  `suma_total` DECIMAL(10,0) NULL,
  `aprobado` VARCHAR(45) NULL,
  `diferencia` VARCHAR(45) NULL,
  `rediseno` VARCHAR(45) NULL,
  `gastado` VARCHAR(45) NULL,
  `disponible` VARCHAR(45) NULL,
  UNIQUE INDEX `id_presupuesto_UNIQUE` (`id_presupuesto` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`reporte`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`reporte` (
  `id_reporte` VARCHAR(255) NOT NULL,
  `id_seccion` VARCHAR(255) NULL,
  `sigla` VARCHAR(255) NOT NULL,
  `sedes` VARCHAR(45) NULL,
  `rut_pro` VARCHAR(255) NULL,
  `nombre_pro` VARCHAR(255) NULL,
  `num_alumnos` VARCHAR(45) NULL,
  `num_rinde` VARCHAR(45) NULL,
  `promedio` VARCHAR(45) NULL,
  `bajo_cuatro` VARCHAR(45) NULL,
  `porcentaje_bajo_cuatro` VARCHAR(45) NULL,
  `periodo` VARCHAR(255) NULL,
  `prueba` VARCHAR(255) NULL,
  `envio_prueba` TINYINT(1) NULL,
  `valida_prueba` TINYINT(1) NULL,
  `comentario` VARCHAR(255) NULL,
  UNIQUE INDEX `id_reporte_UNIQUE` (`id_reporte` ASC),
  INDEX `fk_rep_sec_idx` (`id_seccion` ASC),
  CONSTRAINT `fk_rep_sec`
    FOREIGN KEY (`id_seccion`)
    REFERENCES `mydb`.`seccion` (`id_seccion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`csvprofes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`csvprofes` (
  `idcsvprofes` INT NULL AUTO_INCREMENT,
  `nombres` VARCHAR(255) NULL,
  `a_paterno` VARCHAR(255) NULL,
  `a_materno` VARCHAR(255) NULL,
  `email` VARCHAR(255) NULL,
  `rut` VARCHAR(255) NULL,
  UNIQUE INDEX `idcsvprofes_UNIQUE` (`idcsvprofes` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`logs`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`logs` (
  `id_logs` INT NOT NULL AUTO_INCREMENT,
  `resumen` VARCHAR(255) NULL,
  `detalle` VARCHAR(255) NULL,
  `fecha` DATETIME NULL,
  PRIMARY KEY (`id_logs`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`perfiles`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`perfiles` (
  `id_perfil` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(255) NULL,
  PRIMARY KEY (`id_perfil`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`usuarios`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`usuarios` (
  `id_correo` VARCHAR(100) NOT NULL,
  `nombre` VARCHAR(100) NULL,
  `apellido` VARCHAR(100) NULL,
  `password` VARCHAR(255) NULL,
  `tipo` INT NULL,
  `estado` VARCHAR(255) NULL,
  PRIMARY KEY (`id_correo`),
  INDEX `fk_tipo_usuario_idx` (`tipo` ASC),
  CONSTRAINT `fk_tipo_usuario`
    FOREIGN KEY (`tipo`)
    REFERENCES `mydb`.`perfiles` (`id_perfil`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`periodos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`periodos` (
  `id_periodo` INT NOT NULL AUTO_INCREMENT,
  `periodo` VARCHAR(45) NULL,
  PRIMARY KEY (`id_periodo`))
ENGINE = InnoDB;

-- ------------------ Poblamiento --------------------------------------
INSERT INTO perfiles(nombre) VALUES('Administrador');
INSERT INTO perfiles(nombre) VALUES('Coordinador');
INSERT INTO perfiles(nombre) VALUES('Consultas');

INSERT INTO usuarios(id_correo, nombre, apellido, password, tipo, estado) VALUES('admin', 'Administrador', ' ','92668782', 1, 'ACTIVO');
-- ----------------------------------------------------------------------
-- Stored Procedure prueba 1 --------------------------------------------
DELIMITER $$
DROP procedure IF EXISTS `sp_nota1`$$

CREATE PROCEDURE `sp_nota1`(

IN sec VARCHAR(255),
IN n VARCHAR(255),
OUT s_com VARCHAR(255),
OUT per VARCHAR(255),
OUT sedes VARCHAR(255),
OUT rut_pro VARCHAR(255),
OUT nombre_pro VARCHAR(255),
OUT num VARCHAR(255),
OUT promedio VARCHAR(255),
OUT bajo VARCHAR(255),
OUT num_rinde VARCHAR(255))

BEGIN


select concat(codigo_asignatura,'-','0','0',numero,jornada) into s_com
from seccion
where id_seccion = sec;

select distinct concat(ano_academico,'0','0',semestre) into per
from seccion s inner join en_curso e on s.id_seccion=e.id_seccion
where s.id_seccion = sec;

select se.desc_sede into sedes
from seccion s inner join sede se on id_sede=sede
where s.id_seccion = sec;

select p.rut into rut_pro
from seccion s inner join profesor p on rut_profesor = rut
where s.id_seccion = sec;

select p.nombres into nombre_pro
from seccion s inner join profesor p on rut_profesor = rut
where s.id_seccion = sec;

select count(re.rut_alumno) into num 
from seccion s 
inner join en_curso re on re.id_seccion = s.id_seccion 
where s.id_seccion = sec; 

select avg(if(re.c1>1,re.c1,null)) into promedio 
from seccion s 
inner join en_curso re on re.id_seccion = s.id_seccion 
where s.id_seccion = sec; 

select count(re.c1) into num_rinde 
from seccion s 
inner join en_curso re on re.id_seccion = s.id_seccion 
where s.id_seccion = sec and re.c1>1;

select count(re.c1) into bajo
from seccion s 
inner join en_curso re on re.id_seccion = s.id_seccion 
where s.id_seccion = sec and re.c1>1 and re.c1<4;

insert into reporte(id_reporte, id_seccion, sigla, sedes, rut_pro, nombre_pro, num_alumnos, num_rinde, promedio, bajo_cuatro, periodo, prueba, envio_prueba, valida_prueba, comentario)
values(concat(sec,per,n),sec, s_com, sedes, rut_pro, nombre_pro, num, num_rinde, promedio, bajo, per, n, 0, 0, '')
ON DUPLICATE KEY UPDATE num_alumnos = num, num_rinde = values(num_rinde), promedio = values(promedio), bajo_cuatro = bajo;


END $$

DELIMITER ;
-- --------------------------------------------------------------------------
-- Stored Procedure prueba 2 --------------------------------------------
DELIMITER $$
DROP procedure IF EXISTS `sp_nota2`$$
CREATE PROCEDURE `sp_nota2`(
IN sec VARCHAR(255),
IN n VARCHAR(255),
OUT s_com VARCHAR(255),
OUT per VARCHAR(255),
OUT sedes VARCHAr(255),
OUT rut_pro VARCHAR(255),
OUT nombre_pro VARCHAR(255),
OUT num VARCHAR(255),
OUT promedio VARCHAR(255),
OUT bajo VARCHAR(255),
OUT num_rinde VARCHAR(255))
BEGIN

select concat(codigo_asignatura,'-','0','0',numero,jornada) into s_com
from seccion
where id_seccion = sec;

select distinct concat(ano_academico,'0','0',semestre) into per
from seccion s inner join en_curso e on s.id_seccion=e.id_seccion
where s.id_seccion = sec;

select se.desc_sede into sedes
from seccion s inner join sede se on id_sede=sede
where s.id_seccion = sec;

select p.rut into rut_pro
from seccion s inner join profesor p on rut_profesor = rut
where s.id_seccion = sec;

select p.nombres into nombre_pro
from seccion s inner join profesor p on rut_profesor = rut
where s.id_seccion = sec;

select count(re.rut_alumno) into num 
from seccion s 
inner join en_curso re on re.id_seccion = s.id_seccion 
where s.id_seccion = sec; 

select cast(avg(if(re.c2>1,re.c2,null)) as decimal(2,1)) into promedio 
from seccion s 
inner join en_curso re on re.id_seccion = s.id_seccion 
where s.id_seccion = sec; 

select count(re.c2) into num_rinde 
from seccion s 
inner join en_curso re on re.id_seccion = s.id_seccion 
where s.id_seccion = sec and re.c2>1;

select count(re.c2) into bajo
from seccion s 
inner join en_curso re on re.id_seccion = s.id_seccion 
where s.id_seccion = sec and re.c2>1 and re.c2<4;

insert into reporte(id_reporte, id_seccion, sigla, sedes, rut_pro, nombre_pro, num_alumnos, num_rinde, promedio, bajo_cuatro, periodo, prueba, envio_prueba,valida_prueba, comentario)
values(concat(sec,per,n), sec, s_com, sedes, rut_pro, nombre_pro, num, num_rinde, promedio, bajo, per, n, 0, 0, '')
ON DUPLICATE KEY UPDATE num_alumnos = num, num_rinde = values(num_rinde), promedio = values(promedio), bajo_cuatro = bajo;


END$$
DELIMITER ;
-- ----------------------------------------------------------------------
-- Stored Procedure prueba 3 --------------------------------------------
DELIMITER $$
DROP procedure IF EXISTS `sp_nota3`$$
CREATE PROCEDURE `sp_nota3`(
IN sec VARCHAR(255),
IN n VARCHAR(255),
OUT s_com VARCHAR(255),
OUT per VARCHAR(255),
OUT sedes VARCHAr(255),
OUT rut_pro VARCHAR(255),
OUT nombre_pro VARCHAR(255),
OUT num VARCHAR(255),
OUT promedio VARCHAR(255),
OUT bajo VARCHAR(255),
OUT num_rinde VARCHAR(255))
BEGIN

select concat(codigo_asignatura,'-','0','0',numero,jornada) into s_com
from seccion
where id_seccion = sec;

select distinct concat(ano_academico,'0','0',semestre) into per
from seccion s inner join en_curso e on s.id_seccion=e.id_seccion
where s.id_seccion = sec;

select se.desc_sede into sedes
from seccion s inner join sede se on id_sede=sede
where s.id_seccion = sec;

select p.rut into rut_pro
from seccion s inner join profesor p on rut_profesor = rut
where s.id_seccion = sec;

select p.nombres into nombre_pro
from seccion s inner join profesor p on rut_profesor = rut
where s.id_seccion = sec;

select count(re.rut_alumno) into num 
from seccion s 
inner join en_curso re on re.id_seccion = s.id_seccion 
where s.id_seccion = sec; 

select cast(avg(if(re.c3>1,re.c3,null)) as decimal(2,1)) into promedio 
from seccion s 
inner join en_curso re on re.id_seccion = s.id_seccion 
where s.id_seccion = sec; 

select count(re.c3) into num_rinde 
from seccion s 
inner join en_curso re on re.id_seccion = s.id_seccion 
where s.id_seccion = sec and re.c3>1;

select count(re.c3) into bajo
from seccion s 
inner join en_curso re on re.id_seccion = s.id_seccion 
where s.id_seccion = sec and re.c3>1 and re.c3<4;

insert into reporte(id_reporte, id_seccion, sigla, sedes, rut_pro, nombre_pro, num_alumnos, num_rinde, promedio, bajo_cuatro, periodo, prueba, envio_prueba, valida_prueba, comentario)
values(concat(sec,per,n), sec, s_com, sedes, rut_pro, nombre_pro, num, num_rinde, promedio, bajo, per, n, 0, 0, '') 
ON DUPLICATE KEY UPDATE num_alumnos = num, num_rinde = values(num_rinde), promedio = values(promedio), bajo_cuatro = bajo;


END$$
DELIMITER ;
-- ----------------------------------------------------------------------
-- Stored Procedure docentes --------------------------------------------
DELIMITER $$
DROP procedure IF EXISTS `sp_profes`$$
CREATE PROCEDURE `sp_profes`(
IN rutp VARCHAR(255),
OUT nom VARCHAR(255),
OUT a_p VARCHAR(255),
OUT a_m VARCHAR(255),
OUT em VARCHAR(255)
)
BEGIN

select distinct nombres into nom from csvprofes where rut = rutp;
select distinct a_paterno into a_p  from csvprofes where rut = rutp;
select distinct a_materno into a_m  from csvprofes where rut = rutp;
select distinct email into em  from csvprofes where rut = rutp;

update ignore profesor set nombres = nom, primer_apellido = a_p, segundo_apellido = a_m, correo = em
where rut = rutp;

END$$
DELIMITER ;
-- ----------------------------------------------------------------------
-- Stored Procedure docentes --------------------------------------------
DELIMITER $$
DROP procedure IF EXISTS `sp_poblamiento`$$
CREATE PROCEDURE `sp_poblamiento`()
BEGIN

insert ignore into asignatura(codigo) (select distinct alh_ramo_preferencia from csvnotas);
insert ignore into periodos(periodo) (select distinct concat(ano_academico, '0', '0', dom_semestre) from csvnotas);
insert ignore into sede (select distinct sede, desc_sede from csvnotas);
insert ignore into profesor(rut, nombres) (select distinct replace(rut_profesor, '-',''), nombre_profesor from csvnotas);
insert ignore into seccion(id_seccion, codigo_asignatura, numero, jornada, rut_profesor, sede)
(select distinct concat(alh_ramo_preferencia,'-','0','0', seccion, jornada, sede, replace(rut_profesor, '-','')),
alh_ramo_preferencia, seccion, jornada, replace(rut_profesor, '-',''), sede
from csvnotas);

insert ignore into alumno(rut_alumno) (select distinct rut_alumno from csvnotas);

insert into en_curso (id_reporte, id_seccion, rut_alumno, sigla_completa, ano_academico, semestre, c1, c2, c3)
(select 
concat(substring(alh_ramo_preferencia,0,1),'-','0','0', seccion, jornada, sede, rut_alumno, replace(rut_profesor, '-','')), 
concat(alh_ramo_preferencia,'-','0','0', seccion, jornada, sede, replace(rut_profesor, '-','')), 
rut_alumno, 
concat(alh_ramo_preferencia,'-','0','0', seccion, jornada), ano_academico, 
dom_semestre, c1, c2, c3 from csvnotas) ON DUPLICATE KEY UPDATE c1 = values(c1), c2 = values(c2), c3 = values(c3);


END$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
